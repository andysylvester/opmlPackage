<?xml version="1.0" encoding="ISO-8859-1"?>
<!-- OPML generated by OPML Editor v10.1b19 on Fri, 02 Jul 2021 15:04:25 GMT -->
<opml version="2.0">
	<head>
		<title>nodeEditor: opmlPackage</title>
		<dateCreated>Mon, 28 Jun 2021 19:23:08 GMT</dateCreated>
		<dateModified>Fri, 02 Jul 2021 15:04:25 GMT</dateModified>
		<ownerName>Dave Winer</ownerName>
		<ownerId>http://davewiner.com/</ownerId>
		<expansionState>1, 2, 3, 5, 9, 10, 15, 22, 33, 34, 36, 41, 42, 47</expansionState>
		<vertScrollState>1</vertScrollState>
		<windowTop>101</windowTop>
		<windowLeft>906</windowLeft>
		<windowBottom>1097</windowBottom>
		<windowRight>1981</windowRight>
		</head>
	<body>
		<outline text="/scripting.com/code/opmlpackage/">
			<outline text="notes.opml" isComment="true" created="Mon, 28 Jun 2021 19:25:17 GMT">
				<outline text="7/1/21; 11:45:06 AM by DW" created="Thu, 01 Jul 2021 15:45:05 GMT">
					<outline text="opml.parse has to take a callback because xml2js.parse does." created="Thu, 01 Jul 2021 15:45:06 GMT"/>
					</outline>
				<outline text="6/28/21; 3:25:22 PM by DW" created="Mon, 28 Jun 2021 19:25:21 GMT">
					<outline text="this is where the toolkit for supporting instant outlines and other stuff will go" created="Mon, 28 Jun 2021 19:25:23 GMT"/>
					<outline text="may incorporate features from other packages" created="Mon, 28 Jun 2021 19:25:45 GMT"/>
					<outline text="the idea is to make it easy for Node devs to support OPML in an interoperable way" created="Mon, 28 Jun 2021 19:25:52 GMT"/>
					</outline>
				</outline>
			<outline text="package.json">
				<outline text="{">
					<outline text="&quot;name&quot;: &quot;opml&quot;,"/>
					<outline text="&quot;description&quot;: &quot;Node and browser-based code that helps developers support OPML in outliners, processors and renderers.&quot;," created="Fri, 02 Jul 2021 14:57:59 GMT"/>
					<outline text="&quot;version&quot;: &quot;0.4.1&quot;,"/>
					<outline text="&quot;main&quot;: &quot;opmlpackage.js&quot;,"/>
					<outline text="&quot;dependencies&quot; : {">
						<outline text="&quot;request&quot;: &quot;*&quot;,"/>
						<outline text="&quot;xml2js&quot;: &quot;*&quot;," created="Wed, 30 Jun 2021 13:10:12 GMT"/>
						<outline text="&quot;daveutils&quot;: &quot;*&quot;,"/>
						<outline text="&quot;opmltojs&quot;: &quot;*&quot;" created="Mon, 08 Mar 2021 15:15:44 GMT"/>
						<outline text="} "/>
						</outline>
					<outline text="}"/>
					</outline>
				</outline>
			<outline text="opmlpackage.js" created="Mon, 08 Mar 2021 15:16:10 GMT">
				<outline text="const myVersion = &quot;0.4.1&quot;, myProductName = &quot;opmlPackage&quot;; " created="Mon, 03 Feb 2014 03:21:03 GMT" pgfnum="36831"/>
				<outline text="" created="Wed, 30 Jun 2021 12:10:35 GMT"/>
				<outline text="exports.parse = parse; "/>
				<outline text="" created="Wed, 30 Jun 2021 12:12:23 GMT"/>
				<outline text="const utils = require (&quot;daveutils&quot;);" created="Sat, 20 Feb 2021 22:03:12 GMT"/>
				<outline text="const opmltojs = require (&quot;opmltojs&quot;);" created="Sat, 20 Feb 2021 22:03:12 GMT"/>
				<outline text="const xml2js = require (&quot;xml2js&quot;);"/>
				<outline text="" created="Wed, 30 Jun 2021 12:10:35 GMT"/>
				<outline text="function isScalar (obj) {">
					<outline text="if (typeof (obj) == &quot;object&quot;) {">
						<outline text="return (false);"/>
						<outline text="}"/>
						</outline>
					<outline text="return (true);"/>
					<outline text="}"/>
					</outline>
				<outline text="function parse (opmltext, callback) {" created="Wed, 30 Jun 2021 12:10:36 GMT">
					<outline text="Changes" isComment="true">
						<outline text="1/18/21; 10:21:27 AM by DW">
							<outline text="I created an OPML format that added a &quot;subs&quot; attribute to each headline that had subs. This was an error, but was still valid OPML, but it caused this code to fail, because subs was the wrong type. It is always a mistake, if it's possible that your OPML will be converted to a JS object. So I protected against it here, and don't copy an attribute called subs if it's present. It's possible that this fix could cause problems too, btw. The code is in Old School, look for saveDayInOpml. "/>
							</outline>
						<outline text="4/18/20; 5:43:20 PM by DW">
							<outline text="Changed the callback to return the standard format, with an err first, and theOutline second. "/>
							<outline text="I didn't want to break all the apps that use this as it was configured, but in the future, use this entry point not the one without the error."/>
							</outline>
						</outline>
					<outline text="function addGenerator (theOpml) { //follow the example of RSS 2.0">
						<outline text="try {">
							<outline text="theOpml.head.generator = myProductName + &quot; v&quot; + myVersion;"/>
							<outline text="}"/>
							</outline>
						<outline text="catch (err) {">
							<outline text="}"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="function convert (sourcestruct, deststruct) {">
						<outline text="var atts = sourcestruct [&quot;$&quot;];"/>
						<outline text="if (atts !== undefined) {">
							<outline text="for (var x in atts) {">
								<outline text="if (x != &quot;subs&quot;) { //1/18/21 by DW">
									<outline text="deststruct [x] = atts [x];"/>
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="delete sourcestruct [&quot;$&quot;];"/>
							<outline text="}"/>
							</outline>
						<outline text="for (var x in sourcestruct) {">
							<outline text="var obj = sourcestruct [x];"/>
							<outline text="if (isScalar (obj)) {">
								<outline text="deststruct [x] = obj;"/>
								<outline text="}"/>
								</outline>
							<outline text="else {">
								<outline text="if (x == &quot;outline&quot;) {">
									<outline text="if (deststruct.subs === undefined) {">
										<outline text="deststruct.subs = new Array ();"/>
										<outline text="}"/>
										</outline>
									<outline text="if (Array.isArray (obj)) {">
										<outline text="for (var i = 0; i &lt; obj.length; i++) {">
											<outline text="var newobj = new Object ();"/>
											<outline text="convert (obj [i], newobj);"/>
											<outline text="deststruct.subs.push (newobj);"/>
											<outline text="}"/>
											</outline>
										<outline text="}"/>
										</outline>
									<outline text="else {">
										<outline text="var newobj = new Object ();"/>
										<outline text="convert (obj, newobj);"/>
										<outline text="deststruct.subs.push (newobj);"/>
										<outline text="}"/>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="else {">
									<outline text="deststruct [x] = new Object ();"/>
									<outline text="convert (obj, deststruct [x]);"/>
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="var options = {">
						<outline text="explicitArray: false"/>
						<outline text="};"/>
						</outline>
					<outline text="xml2js.parseString (opmltext, options, function (err, jstruct) {">
						<outline text="if (err) { ">
							<outline text="callback (err);"/>
							<outline text="}"/>
							</outline>
						<outline text="else {">
							<outline text="var theOutline = {">
								<outline text="opml: new Object ()"/>
								<outline text="}"/>
								</outline>
							<outline text="convert (jstruct.opml, theOutline.opml);"/>
							<outline text="addGenerator (theOutline.opml); //8/6/17 by DW"/>
							<outline text="if (isScalar (theOutline.opml.head)) { //8/6/17 by DW">
								<outline text="theOutline.opml.head = new Object ();"/>
								<outline text="}"/>
								</outline>
							<outline text="if (isScalar (theOutline.opml.body)) { //8/6/17 by DW">
								<outline text="theOutline.opml.body = new Object ();"/>
								<outline text="}"/>
								</outline>
							<outline text="callback (undefined, theOutline);"/>
							<outline text="}"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="xml2js.parseString (opmltext, options, function (err, jstruct) {" isComment="true">
						<outline text="if (err) { //4/18/20 by DW">
							<outline text="callback (err);"/>
							<outline text="}"/>
							</outline>
						<outline text="else {">
							<outline text="var theOutline = {">
								<outline text="opml: new Object ()"/>
								<outline text="}"/>
								</outline>
							<outline text="convert (jstruct.opml, theOutline.opml);"/>
							<outline text="addGenerator (theOutline.opml); //8/6/17 by DW"/>
							<outline text="if (isScalar (theOutline.opml.head)) { //8/6/17 by DW">
								<outline text="theOutline.opml.head = new Object ();"/>
								<outline text="}"/>
								</outline>
							<outline text="if (isScalar (theOutline.opml.body)) { //8/6/17 by DW">
								<outline text="theOutline.opml.body = new Object ();"/>
								<outline text="}"/>
								</outline>
							<outline text="callback (undefined, theOutline);"/>
							<outline text="}"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}" created="Wed, 30 Jun 2021 12:12:55 GMT"/>
					</outline>
				</outline>
			<outline text="readme.md" created="Fri, 02 Jul 2021 14:57:47 GMT">
				<outline text="# opmlPackage" created="Fri, 02 Jul 2021 14:57:50 GMT">
					<outline text="Node and browser-based code that helps developers support OPML in outliners, processors and renderers." created="Fri, 02 Jul 2021 15:04:01 GMT"/>
					</outline>
				</outline>
			<outline text="example.js" created="Wed, 30 Jun 2021 13:10:36 GMT">
				<outline text="const utils = require (&quot;daveutils&quot;);" created="Sat, 20 Feb 2021 22:03:12 GMT"/>
				<outline text="const fs = require (&quot;fs&quot;);"/>
				<outline text="const opml = require (&quot;./opml.js&quot;);" created="Sat, 20 Feb 2021 22:03:12 GMT"/>
				<outline text="" created="Wed, 30 Jun 2021 13:12:19 GMT"/>
				<outline text="fs.readFile (&quot;blog.opml&quot;, function (err, opmltext) {" created="Wed, 30 Jun 2021 13:12:23 GMT">
					<outline text="opml.parse (opmltext, function (err, theOutline) {" created="Wed, 30 Jun 2021 13:16:34 GMT">
						<outline text="console.log (utils.jsonStringify (theOutline));" created="Wed, 30 Jun 2021 13:20:06 GMT"/>
						<outline text="});" created="Wed, 30 Jun 2021 13:16:57 GMT"/>
						</outline>
					<outline text="});" created="Wed, 30 Jun 2021 13:12:39 GMT"/>
					</outline>
				<outline text="" created="Wed, 30 Jun 2021 13:12:42 GMT"/>
				</outline>
			</outline>
		<outline text="build script" created="Fri, 02 Jul 2021 14:50:21 GMT">
			<outline text="nodeEditorSuite.utilities.buildOpmlPackage ();" created="Fri, 02 Jul 2021 14:50:25 GMT"/>
			</outline>
		</body>
	</opml>
