<?xml version="1.0" encoding="ISO-8859-1"?>
<!-- OPML generated by OPML Editor v10.1b19 on Sat, 03 Jul 2021 20:51:07 GMT -->
<opml version="2.0">
	<head>
		<title>nodeEditor: opmlPackage</title>
		<dateCreated>Mon, 28 Jun 2021 19:23:08 GMT</dateCreated>
		<dateModified>Sat, 03 Jul 2021 20:51:07 GMT</dateModified>
		<ownerName>Dave Winer</ownerName>
		<ownerId>http://davewiner.com/</ownerId>
		<expansionState>1, 7, 17, 25, 26, 27, 41, 42, 44, 46, 49, 52</expansionState>
		<vertScrollState>1</vertScrollState>
		<windowTop>184</windowTop>
		<windowLeft>787</windowLeft>
		<windowBottom>1180</windowBottom>
		<windowRight>1862</windowRight>
		</head>
	<body>
		<outline text="/scripting.com/code/opmlpackage/">
			<outline text="notes.opml" isComment="true" created="Mon, 28 Jun 2021 19:25:17 GMT">
				<outline text="7/1/21; 11:45:06 AM by DW" created="Thu, 01 Jul 2021 15:45:05 GMT">
					<outline text="opml.parse has to take a callback because xml2js.parse does." created="Thu, 01 Jul 2021 15:45:06 GMT"/>
					</outline>
				<outline text="6/28/21; 3:25:22 PM by DW" created="Mon, 28 Jun 2021 19:25:21 GMT">
					<outline text="this is where the toolkit for supporting instant outlines and other stuff will go" created="Mon, 28 Jun 2021 19:25:23 GMT"/>
					<outline text="may incorporate features from other packages" created="Mon, 28 Jun 2021 19:25:45 GMT"/>
					<outline text="the idea is to make it easy for Node devs to support OPML in an interoperable way" created="Mon, 28 Jun 2021 19:25:52 GMT"/>
					</outline>
				</outline>
			<outline text="package.json">
				<outline text="{">
					<outline text="&quot;name&quot;: &quot;opml&quot;,"/>
					<outline text="&quot;description&quot;: &quot;Node and browser code that helps developers support OPML in outliners, processors and renderers.&quot;," created="Fri, 02 Jul 2021 14:57:59 GMT"/>
					<outline text="&quot;author&quot;: &quot;Dave Winer &lt;dave@scripting.com&gt;&quot;,"/>
					<outline text="&quot;version&quot;: &quot;0.4.5&quot;,"/>
					<outline text="&quot;license&quot;: &quot;MIT&quot;,"/>
					<outline text="&quot;repository&quot;: {">
						<outline text="&quot;type&quot;: &quot;git&quot;,"/>
						<outline text="&quot;url&quot;: &quot;https://github.com/scripting/opmlpackage.git&quot;"/>
						<outline text="},"/>
						</outline>
					<outline text="&quot;files&quot;: [">
						<outline text="&quot;opmlpackage.js&quot;"/>
						<outline text="],"/>
						</outline>
					<outline text="&quot;main&quot;: &quot;opmlpackage.js&quot;,"/>
					<outline text="&quot;dependencies&quot; : {">
						<outline text="&quot;request&quot;: &quot;*&quot;,"/>
						<outline text="&quot;xml2js&quot;: &quot;*&quot;," created="Wed, 30 Jun 2021 13:10:12 GMT"/>
						<outline text="&quot;daveutils&quot;: &quot;*&quot;,"/>
						<outline text="&quot;opmltojs&quot;: &quot;*&quot;" created="Mon, 08 Mar 2021 15:15:44 GMT"/>
						<outline text="} "/>
						</outline>
					<outline text="}"/>
					</outline>
				</outline>
			<outline text="opmlpackage.js" created="Mon, 08 Mar 2021 15:16:10 GMT">
				<outline text="const myVersion = &quot;0.4.5&quot;, myProductName = &quot;opmlPackage&quot;; " created="Mon, 03 Feb 2014 03:21:03 GMT" pgfnum="36831"/>
				<outline text="" created="Wed, 30 Jun 2021 12:10:35 GMT"/>
				<outline text="exports.parse = parse; "/>
				<outline text="exports.stringify = stringify; "/>
				<outline text="exports.htmlify = getOutlineHtml; "/>
				<outline text="exports.visitAll = visitAll; "/>
				<outline text="" created="Wed, 30 Jun 2021 12:12:23 GMT"/>
				<outline text="const utils = require (&quot;daveutils&quot;);" created="Sat, 20 Feb 2021 22:03:12 GMT"/>
				<outline text="const opmltojs = require (&quot;opmltojs&quot;);" created="Sat, 20 Feb 2021 22:03:12 GMT"/>
				<outline text="const xml2js = require (&quot;xml2js&quot;);"/>
				<outline text="const opmlToJs = require (&quot;opmltojs&quot;);"/>
				<outline text="" created="Wed, 30 Jun 2021 12:10:35 GMT"/>
				<outline text="function parse (opmltext, callback) { //returns a JavaScript object with all the info in the opmltext" created="Wed, 30 Jun 2021 12:10:36 GMT">
					<outline text="Changes" isComment="true">
						<outline text="1/18/21; 10:21:27 AM by DW">
							<outline text="I created an OPML format that added a &quot;subs&quot; attribute to each headline that had subs. This was an error, but was still valid OPML, but it caused this code to fail, because subs was the wrong type. It is always a mistake, if it's possible that your OPML will be converted to a JS object. So I protected against it here, and don't copy an attribute called subs if it's present. It's possible that this fix could cause problems too, btw. The code is in Old School, look for saveDayInOpml. "/>
							</outline>
						<outline text="4/18/20; 5:43:20 PM by DW">
							<outline text="Changed the callback to return the standard format, with an err first, and theOutline second. "/>
							<outline text="I didn't want to break all the apps that use this as it was configured, but in the future, use this entry point not the one without the error."/>
							</outline>
						</outline>
					<outline text="function isScalar (obj) {">
						<outline text="if (typeof (obj) == &quot;object&quot;) {">
							<outline text="return (false);"/>
							<outline text="}"/>
							</outline>
						<outline text="return (true);"/>
						<outline text="}"/>
						</outline>
					<outline text="function addGenerator (theOpml) { //follow the example of RSS 2.0">
						<outline text="try {">
							<outline text="theOpml.head.generator = myProductName + &quot; v&quot; + myVersion;"/>
							<outline text="}"/>
							</outline>
						<outline text="catch (err) {">
							<outline text="}"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="function convert (sourcestruct, deststruct) {">
						<outline text="var atts = sourcestruct [&quot;$&quot;];"/>
						<outline text="if (atts !== undefined) {">
							<outline text="for (var x in atts) {">
								<outline text="if (x != &quot;subs&quot;) { //1/18/21 by DW">
									<outline text="deststruct [x] = atts [x];"/>
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="delete sourcestruct [&quot;$&quot;];"/>
							<outline text="}"/>
							</outline>
						<outline text="for (var x in sourcestruct) {">
							<outline text="var obj = sourcestruct [x];"/>
							<outline text="if (isScalar (obj)) {">
								<outline text="deststruct [x] = obj;"/>
								<outline text="}"/>
								</outline>
							<outline text="else {">
								<outline text="if (x == &quot;outline&quot;) {">
									<outline text="if (deststruct.subs === undefined) {">
										<outline text="deststruct.subs = new Array ();"/>
										<outline text="}"/>
										</outline>
									<outline text="if (Array.isArray (obj)) {">
										<outline text="for (var i = 0; i &lt; obj.length; i++) {">
											<outline text="var newobj = new Object ();"/>
											<outline text="convert (obj [i], newobj);"/>
											<outline text="deststruct.subs.push (newobj);"/>
											<outline text="}"/>
											</outline>
										<outline text="}"/>
										</outline>
									<outline text="else {">
										<outline text="var newobj = new Object ();"/>
										<outline text="convert (obj, newobj);"/>
										<outline text="deststruct.subs.push (newobj);"/>
										<outline text="}"/>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="else {">
									<outline text="deststruct [x] = new Object ();"/>
									<outline text="convert (obj, deststruct [x]);"/>
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="var options = {">
						<outline text="explicitArray: false"/>
						<outline text="};"/>
						</outline>
					<outline text="xml2js.parseString (opmltext, options, function (err, jstruct) {">
						<outline text="if (err) { ">
							<outline text="callback (err);"/>
							<outline text="}"/>
							</outline>
						<outline text="else {">
							<outline text="var theOutline = {">
								<outline text="opml: new Object ()"/>
								<outline text="}"/>
								</outline>
							<outline text="convert (jstruct.opml, theOutline.opml);"/>
							<outline text="addGenerator (theOutline.opml); //8/6/17 by DW"/>
							<outline text="if (isScalar (theOutline.opml.head)) { //8/6/17 by DW">
								<outline text="theOutline.opml.head = new Object ();"/>
								<outline text="}"/>
								</outline>
							<outline text="if (isScalar (theOutline.opml.body)) { //8/6/17 by DW">
								<outline text="theOutline.opml.body = new Object ();"/>
								<outline text="}"/>
								</outline>
							<outline text="callback (undefined, theOutline);"/>
							<outline text="}"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="xml2js.parseString (opmltext, options, function (err, jstruct) {" isComment="true">
						<outline text="if (err) { //4/18/20 by DW">
							<outline text="callback (err);"/>
							<outline text="}"/>
							</outline>
						<outline text="else {">
							<outline text="var theOutline = {">
								<outline text="opml: new Object ()"/>
								<outline text="}"/>
								</outline>
							<outline text="convert (jstruct.opml, theOutline.opml);"/>
							<outline text="addGenerator (theOutline.opml); //8/6/17 by DW"/>
							<outline text="if (isScalar (theOutline.opml.head)) { //8/6/17 by DW">
								<outline text="theOutline.opml.head = new Object ();"/>
								<outline text="}"/>
								</outline>
							<outline text="if (isScalar (theOutline.opml.body)) { //8/6/17 by DW">
								<outline text="theOutline.opml.body = new Object ();"/>
								<outline text="}"/>
								</outline>
							<outline text="callback (undefined, theOutline);"/>
							<outline text="}"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}" created="Wed, 30 Jun 2021 12:12:55 GMT"/>
					</outline>
				<outline text="function stringify (theOutline) { //returns the opmltext for the outline" created="Fri, 02 Jul 2021 15:17:20 GMT">
					<outline text="var opmltext = opmlToJs.opmlify (theOutline);" created="Thu, 17 Jun 2021 22:19:39 GMT"/>
					<outline text="return (opmltext);" created="Fri, 02 Jul 2021 15:19:13 GMT"/>
					<outline text="}" created="Fri, 02 Jul 2021 15:17:33 GMT"/>
					</outline>
				<outline text="function getOutlineHtml (theOutline) {" created="Thu, 10 Jun 2021 16:51:40 GMT">
					<outline text="var htmltext = &quot;&quot;; indentlevel = 0;" created="Thu, 10 Jun 2021 18:52:52 GMT"/>
					<outline text="function add (s) {" created="Thu, 10 Jun 2021 18:53:04 GMT">
						<outline text="htmltext += filledString (&quot;\t&quot;, indentlevel) + s + &quot;\n&quot;;" created="Thu, 10 Jun 2021 18:57:55 GMT"/>
						<outline text="}" created="Thu, 10 Jun 2021 18:57:50 GMT"/>
						</outline>
					<outline text="function addSubsHtml (node) {" created="Thu, 10 Jun 2021 18:52:07 GMT">
						<outline text="add (&quot;&lt;ul&gt;&quot;); indentlevel++;" created="Thu, 10 Jun 2021 18:54:17 GMT"/>
						<outline text="node.subs.forEach (function (sub) {" created="Thu, 10 Jun 2021 18:54:17 GMT">
							<outline text="add (&quot;&lt;li&gt;&quot; + sub.text + &quot;&lt;/li&gt;&quot;);" created="Thu, 10 Jun 2021 18:54:46 GMT"/>
							<outline text="if (sub.subs !== undefined) {" created="Thu, 10 Jun 2021 18:55:12 GMT">
								<outline text="addSubsHtml (sub);" created="Thu, 10 Jun 2021 18:55:37 GMT"/>
								<outline text="}" created="Thu, 10 Jun 2021 18:55:21 GMT"/>
								</outline>
							<outline text="});" created="Thu, 10 Jun 2021 18:54:26 GMT"/>
							</outline>
						<outline text="add (&quot;&lt;/ul&gt;&quot;); indentlevel--;" created="Thu, 10 Jun 2021 18:54:17 GMT"/>
						<outline text="}" created="Thu, 10 Jun 2021 18:52:23 GMT"/>
						</outline>
					<outline text="addSubsHtml (theOutline.opml.body);"/>
					<outline text="return (htmltext);" created="Thu, 10 Jun 2021 16:58:17 GMT"/>
					<outline text="}" created="Thu, 10 Jun 2021 16:51:51 GMT"/>
					</outline>
				<outline text="function visitAll (theOutline, callback) {" created="Sat, 03 Jul 2021 19:33:13 GMT">
					<outline text="function visitSubs (theNode) {" created="Sat, 03 Jul 2021 19:33:25 GMT">
						<outline text="if (theNode.subs !== undefined) {" created="Sat, 03 Jul 2021 19:34:31 GMT">
							<outline text="for (var i = 0; i &lt; theNode.subs.length; i++) {" created="Sat, 03 Jul 2021 19:34:44 GMT">
								<outline text="var theSub = theNode.subs [i];" created="Sat, 03 Jul 2021 19:36:34 GMT"/>
								<outline text="if (!callback (theSub)) {" created="Sat, 03 Jul 2021 19:35:39 GMT">
									<outline text="return (false);" created="Sat, 03 Jul 2021 19:35:50 GMT"/>
									<outline text="}" created="Sat, 03 Jul 2021 19:35:53 GMT"/>
									</outline>
								<outline text="visitSubs (theSub);" created="Sat, 03 Jul 2021 19:35:59 GMT"/>
								<outline text="}" created="Sat, 03 Jul 2021 19:35:15 GMT"/>
								</outline>
							<outline text="}" created="Sat, 03 Jul 2021 19:34:39 GMT"/>
							</outline>
						<outline text="return (true);" created="Sat, 03 Jul 2021 19:35:50 GMT"/>
						<outline text="}" created="Sat, 03 Jul 2021 19:34:19 GMT"/>
						</outline>
					<outline text="visitSubs (theOutline.opml.body);" created="Sat, 03 Jul 2021 19:33:26 GMT"/>
					<outline text="}" created="Sat, 03 Jul 2021 19:33:20 GMT"/>
					</outline>
				</outline>
			<outline text="" created="Fri, 02 Jul 2021 21:15:05 GMT"/>
			<outline text="examples/parsing/package.json" created="Wed, 30 Jun 2021 13:10:36 GMT">
				<outline text="{">
					<outline text="&quot;name&quot;: &quot;test&quot;,"/>
					<outline text="&quot;description&quot;: &quot;Test opml.parse and opml.stringify.&quot;," created="Fri, 02 Jul 2021 14:57:59 GMT"/>
					<outline text="&quot;author&quot;: &quot;Dave Winer &lt;dave@scripting.com&gt;&quot;,"/>
					<outline text="&quot;version&quot;: &quot;0.4.2&quot;,"/>
					<outline text="&quot;license&quot;: &quot;MIT&quot;,"/>
					<outline text="&quot;main&quot;: &quot;test.js&quot;,"/>
					<outline text="&quot;dependencies&quot; : {">
						<outline text="&quot;daveutils&quot;: &quot;*&quot;,"/>
						<outline text="&quot;opml&quot;: &quot;*&quot;" created="Mon, 08 Mar 2021 15:15:44 GMT"/>
						<outline text="} "/>
						</outline>
					<outline text="}"/>
					</outline>
				</outline>
			<outline text="examples/parsing/test.js" created="Wed, 30 Jun 2021 13:10:36 GMT">
				<outline text="7/3/21; 3:27:01 PM by DW" isComment="true" created="Sat, 03 Jul 2021 19:27:01 GMT">
					<outline text="Read and write an OPML file from a file." created="Sat, 03 Jul 2021 19:27:51 GMT"/>
					<outline text="Also display:" created="Sat, 03 Jul 2021 15:29:57 GMT">
						<outline text="The outline's title from the head section and " created="Sat, 03 Jul 2021 15:34:45 GMT"/>
						<outline text="The text of the third child of the second top level subhead of the United States." created="Sat, 03 Jul 2021 15:34:54 GMT"/>
						<outline text="Illustrates how you get data from the compiled structure." created="Sat, 03 Jul 2021 15:31:45 GMT"/>
						<outline text="Once you've compiled the OPML, you process it as a JavaScript object." created="Sat, 03 Jul 2021 15:35:25 GMT"/>
						<outline text="When you're done, you can serialize it with opml.stringify. " created="Sat, 03 Jul 2021 15:35:47 GMT"/>
						<outline text="By design, works like JSON, so every JS programmer should find this familiar. " created="Sat, 03 Jul 2021 15:36:02 GMT"/>
						</outline>
					<outline text="Visit every node in the outline, and convert the text to upper case." created="Sat, 03 Jul 2021 19:31:33 GMT">
						<outline text="Display OPML text of the uppercased outline in the console." created="Sat, 03 Jul 2021 19:47:39 GMT"/>
						</outline>
					</outline>
				<outline text="" created="Sat, 03 Jul 2021 15:23:53 GMT"/>
				<outline text="const fs = require (&quot;fs&quot;);"/>
				<outline text="const opml = require (&quot;opml&quot;);" created="Sat, 20 Feb 2021 22:03:12 GMT"/>
				<outline text="" created="Wed, 30 Jun 2021 13:12:19 GMT"/>
				<outline text="fs.readFile (&quot;states.opml&quot;, function (err, opmltext) {" created="Wed, 30 Jun 2021 13:12:23 GMT">
					<outline text="if (err) {" created="Sat, 03 Jul 2021 14:56:50 GMT">
						<outline text="console.log (err.message);" created="Sat, 03 Jul 2021 14:56:52 GMT"/>
						<outline text="}" created="Sat, 03 Jul 2021 14:57:02 GMT"/>
						</outline>
					<outline text="else {" created="Sat, 03 Jul 2021 14:57:03 GMT">
						<outline text="opml.parse (opmltext, function (err, theOutline) { //convert OPML text into a JavaScript structure" created="Wed, 30 Jun 2021 13:16:34 GMT">
							<outline text="console.log (&quot;\nThe outline's title is \&quot;&quot; + theOutline.opml.head.title + &quot;.\&quot;&quot;); //see comment at top" created="Sat, 03 Jul 2021 15:30:30 GMT"/>
							<outline text="console.log (&quot;The third state in the Great Plains is: \&quot;&quot; + theOutline.opml.body.subs [0].subs [1].subs [2].text + &quot;.\&quot;&quot;);" created="Sat, 03 Jul 2021 15:30:30 GMT"/>
							<outline text="fs.writeFile (&quot;states.json&quot;, JSON.stringify (theOutline, undefined, 4), function (err) {" created="Sat, 03 Jul 2021 15:24:06 GMT">
								<outline text="if (err) {" created="Sat, 03 Jul 2021 15:24:43 GMT">
									<outline text="console.log (err.message);" created="Sat, 03 Jul 2021 15:24:45 GMT"/>
									<outline text="}" created="Sat, 03 Jul 2021 15:24:49 GMT"/>
									</outline>
								<outline text="else {" created="Sat, 03 Jul 2021 15:40:08 GMT">
									<outline text="console.log (&quot;states.json was saved.&quot;);" created="Sat, 03 Jul 2021 15:40:15 GMT"/>
									<outline text="}" created="Sat, 03 Jul 2021 15:40:30 GMT"/>
									</outline>
								<outline text="});" created="Sat, 03 Jul 2021 15:24:38 GMT"/>
								</outline>
							<outline text="fs.writeFile (&quot;statescopy.opml&quot;, opml.stringify (theOutline), function (err) {" created="Sat, 03 Jul 2021 15:24:06 GMT">
								<outline text="if (err) {" created="Sat, 03 Jul 2021 15:24:43 GMT">
									<outline text="console.log (err.message);" created="Sat, 03 Jul 2021 15:24:45 GMT"/>
									<outline text="}" created="Sat, 03 Jul 2021 15:24:49 GMT"/>
									</outline>
								<outline text="else {" created="Sat, 03 Jul 2021 15:40:08 GMT">
									<outline text="console.log (&quot;statescopy.opml was saved.&quot;);" created="Sat, 03 Jul 2021 15:40:15 GMT"/>
									<outline text="}" created="Sat, 03 Jul 2021 15:40:30 GMT"/>
									</outline>
								<outline text="});" created="Sat, 03 Jul 2021 15:24:38 GMT"/>
								</outline>
							<outline text="opml.visitAll (theOutline, function (node) {" created="Sat, 03 Jul 2021 19:31:57 GMT">
								<outline text="node.text = node.text.toUpperCase ();" created="Sat, 03 Jul 2021 19:32:24 GMT"/>
								<outline text="return (true); //keep visiting" created="Sat, 03 Jul 2021 19:32:47 GMT"/>
								<outline text="});" created="Sat, 03 Jul 2021 19:32:16 GMT"/>
								</outline>
							<outline text="console.log (opml.stringify (theOutline)); //view the uppercased outline in the JS console" created="Sat, 03 Jul 2021 19:38:29 GMT"/>
							<outline text="});" created="Wed, 30 Jun 2021 13:16:57 GMT"/>
							</outline>
						<outline text="}" created="Sat, 03 Jul 2021 14:57:05 GMT"/>
						</outline>
					<outline text="});" created="Wed, 30 Jun 2021 13:12:39 GMT"/>
					</outline>
				</outline>
			<outline text="" created="Fri, 02 Jul 2021 15:25:02 GMT"/>
			<outline text="client/opml.js" created="Fri, 02 Jul 2021 15:25:02 GMT">
				<outline text="const opml = {" created="Sat, 03 Jul 2021 19:19:58 GMT">
					<outline text="parse: opmlParse," created="Sat, 03 Jul 2021 19:20:11 GMT"/>
					<outline text="stringify: opmlStringify," created="Sat, 03 Jul 2021 19:20:14 GMT"/>
					<outline text="htmlify: getOutlineHtml," created="Sat, 03 Jul 2021 19:20:56 GMT"/>
					<outline text="visitAll: visitAll" created="Sat, 03 Jul 2021 19:33:05 GMT"/>
					<outline text="};" created="Sat, 03 Jul 2021 19:20:04 GMT"/>
					</outline>
				<outline text="" created="Sat, 03 Jul 2021 19:19:58 GMT"/>
				<outline text="function xmlCompile (xmltext) { //3/27/17 by DW">
					<outline text="return ($($.parseXML (xmltext)));"/>
					<outline text="}"/>
					</outline>
				<outline text="function xmlGatherAttributes (adrx, theTable) {" created="Tue, 05 Nov 2013 16:59:40 GMT" pgfnum="30862">
					<outline text="if (adrx.attributes != undefined) {" created="Tue, 05 Nov 2013 15:02:55 GMT" pgfnum="30828">
						<outline text="for (var i = 0; i &lt; adrx.attributes.length; i++) {">
							<outline text="var att = adrx.attributes [i];"/>
							<outline text="if (att.specified) {">
								<outline text="theTable [att.name] = att.value;" created="Tue, 05 Nov 2013 14:45:42 GMT" pgfnum="30820"/>
								<outline text="}" created="Tue, 05 Nov 2013 14:47:36 GMT" pgfnum="30822"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="}" created="Tue, 05 Nov 2013 15:03:05 GMT" pgfnum="30829"/>
						</outline>
					<outline text="}" created="Tue, 05 Nov 2013 16:59:47 GMT" pgfnum="30864"/>
					</outline>
				<outline text="function xmlGetAddress (adrx, name) {" created="Wed, 30 Oct 2013 17:20:32 GMT" pgfnum="30666">
					<outline text="return (adrx.find (name));" created="Wed, 30 Oct 2013 17:53:45 GMT" pgfnum="30676"/>
					<outline text="}" created="Wed, 30 Oct 2013 17:52:35 GMT" pgfnum="30675"/>
					</outline>
				<outline text="function xmlGetSubValues (adrx) { //10/12/16 by DW">
					<outline text="Changes" isComment="true">
						<outline text="10/12/16; 11:25:15 AM by DW">
							<outline text="Return a JS object with the values of all the sub-elements of adrx."/>
							</outline>
						</outline>
					<outline text="var values = new Object ();"/>
					<outline text="$(adrx).children ().each (function () {">
						<outline text="var name = xmlGetNodeNameProp (this);"/>
						<outline text="if (name.length &gt; 0) {" created="Tue, 24 Dec 2013 17:28:15 GMT" pgfnum="34343">
							<outline text="var val = $(this).prop (&quot;textContent&quot;);" created="Tue, 24 Dec 2013 17:42:30 GMT" pgfnum="34352"/>
							<outline text="name = &quot;opml&quot; + string.upper (name [0]) + string.mid (name, 2, name.length - 1);" isComment="true" created="Tue, 24 Dec 2013 17:28:30 GMT" pgfnum="34349"/>
							<outline text="values [name] = val;" created="Tue, 24 Dec 2013 17:42:52 GMT" pgfnum="34353"/>
							<outline text="}" created="Tue, 24 Dec 2013 17:28:27 GMT" pgfnum="34348"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="return (values);"/>
					<outline text="}"/>
					</outline>
				<outline text="function xmlGetNodeNameProp (adrx) { //12/10/13 by DW" created="Tue, 10 Dec 2013 15:50:23 GMT" pgfnum="33370">
					<outline text="return ($(adrx).prop (&quot;nodeName&quot;));" created="Tue, 10 Dec 2013 15:50:43 GMT" pgfnum="33372"/>
					<outline text="}" created="Tue, 10 Dec 2013 15:50:31 GMT" pgfnum="33371"/>
					</outline>
				<outline text="function xmlHasSubs (adrx) {" created="Thu, 06 Jun 2013 21:06:25 GMT" pgfnum="3862">
					<outline text="return ($(adrx).children ().length &gt; 0); //use jQuery to get answer -- 12/30/13 by DW" created="Mon, 30 Dec 2013 14:07:10 GMT" pgfnum="34893"/>
					<outline text="};" created="Thu, 06 Jun 2013 21:06:38 GMT" pgfnum="3864"/>
					</outline>
				<outline text="function outlineToJson (adrx, nameOutlineElement) { //12/25/20 by DW">
					<outline text="Changes" isComment="true">
						<outline text="12/25/20; 11:48:29 AM by DW">
							<outline text="I was replicating this all over the place, there should be a copy here."/>
							<outline text="adrx points to the &lt;body&gt; of the outline. we return a javascript object with the contents of the body."/>
							</outline>
						<outline text="10/20/14; 5:54:44 PM by DW">
							<outline text="Convert a &lt;source:outline&gt; structure from an RSS item into a jstruct."/>
							</outline>
						</outline>
					<outline text="var theOutline = new Object ();"/>
					<outline text="if (nameOutlineElement === undefined) {">
						<outline text="nameOutlineElement = &quot;outline&quot;;"/>
						<outline text="}"/>
						</outline>
					<outline text="xmlGatherAttributes (adrx, theOutline);"/>
					<outline text="if (xmlHasSubs (adrx)) {">
						<outline text="theOutline.subs = [];"/>
						<outline text="$(adrx).children (nameOutlineElement).each (function () {">
							<outline text="theOutline.subs [theOutline.subs.length] = outlineToJson (this, nameOutlineElement);"/>
							<outline text="});"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="return (theOutline);"/>
					<outline text="}"/>
					</outline>
				<outline text="" created="Sat, 03 Jul 2021 20:46:21 GMT"/>
				<outline text="function opmlParse (opmltext) {" created="Fri, 11 Jun 2021 11:58:09 GMT">
					<outline text="Changes" isComment="true" created="Sun, 13 Jun 2021 13:49:43 GMT">
						<outline text="6/13/21; 9:49:51 AM by DW" created="Sun, 13 Jun 2021 13:49:47 GMT">
							<outline text="Generate a JavaScript object from OPML text. " created="Sun, 13 Jun 2021 13:49:52 GMT"/>
							</outline>
						</outline>
					<outline text="var xstruct = xmlCompile (opmltext);"/>
					<outline text="var adrhead = xmlGetAddress (xstruct, &quot;head&quot;);" created="Thu, 10 Jun 2021 21:07:11 GMT"/>
					<outline text="var adrbody = xmlGetAddress (xstruct, &quot;body&quot;);" created="Fri, 11 Jun 2021 11:59:08 GMT"/>
					<outline text="var theObject = {" created="Fri, 11 Jun 2021 11:59:08 GMT">
						<outline text="opml: {" created="Fri, 11 Jun 2021 11:59:16 GMT">
							<outline text="head: xmlGetSubValues (adrhead)," created="Fri, 11 Jun 2021 11:59:20 GMT"/>
							<outline text="body: outlineToJson (adrbody)" created="Fri, 11 Jun 2021 11:59:37 GMT"/>
							<outline text="}" created="Fri, 11 Jun 2021 12:00:39 GMT"/>
							</outline>
						<outline text="}" created="Fri, 11 Jun 2021 12:00:40 GMT"/>
						</outline>
					<outline text="return (theObject);" created="Fri, 11 Jun 2021 11:59:08 GMT"/>
					<outline text="}" created="Fri, 11 Jun 2021 11:58:19 GMT"/>
					</outline>
				<outline text="function opmlStringify (theOutline) { //returns the opmltext for the outline -- 8/6/17 by DW">
					<outline text="var opmltext = &quot;&quot;, indentlevel = 0;"/>
					<outline text="function add (s) {">
						<outline text="opmltext += filledString (&quot;\t&quot;, indentlevel) + s + &quot;\n&quot;;" created="Wed, 19 Jun 2013 18:22:33 GMT" pgfnum="26661"/>
						<outline text="}"/>
						</outline>
					<outline text="function addSubs (subs) {">
						<outline text="if (subs !== undefined) {">
							<outline text="for (var i = 0; i &lt; subs.length; i++) {">
								<outline text="let sub = subs [i], atts = &quot;&quot;;"/>
								<outline text="for (var x in sub) {" created="Sat, 09 Aug 2014 15:39:38 GMT" pgfnum="43186">
									<outline text="if (x != &quot;subs&quot;) {">
										<outline text="atts += &quot; &quot; + x + &quot;=\&quot;&quot; + encodeXml (sub [x]) + &quot;\&quot;&quot;;" created="Sat, 09 Aug 2014 15:40:19 GMT" pgfnum="43192"/>
										<outline text="}"/>
										</outline>
									<outline text="}" created="Sat, 09 Aug 2014 15:39:43 GMT" pgfnum="43187"/>
									</outline>
								<outline text="if (sub.subs === undefined) {">
									<outline text="add (&quot;&lt;outline&quot; + atts + &quot; /&gt;&quot;);"/>
									<outline text="}"/>
									</outline>
								<outline text="else {">
									<outline text="add (&quot;&lt;outline&quot; + atts + &quot; &gt;&quot;); indentlevel++;"/>
									<outline text="addSubs (sub.subs);"/>
									<outline text="add (&quot;&lt;/outline&gt;&quot;); indentlevel--;"/>
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="add (&quot;&lt;?xml version=\&quot;1.0\&quot; encoding=\&quot;ISO-8859-1\&quot;?&gt;&quot;);"/>
					<outline text="add (&quot;&lt;opml version=\&quot;2.0\&quot;&gt;&quot;); indentlevel++;"/>
					<outline text="//do head section">
						<outline text="add (&quot;&lt;head&gt;&quot;); indentlevel++;"/>
						<outline text="for (var x in theOutline.opml.head) {">
							<outline text="add (&quot;&lt;&quot; + x + &quot;&gt;&quot; + theOutline.opml.head [x] + &quot;&lt;/&quot; + x + &quot;&gt;&quot;);"/>
							<outline text="}"/>
							</outline>
						<outline text="add (&quot;&lt;/head&gt;&quot;); indentlevel--;"/>
						</outline>
					<outline text="//do body section">
						<outline text="add (&quot;&lt;body&gt;&quot;); indentlevel++;"/>
						<outline text="addSubs (theOutline.opml.body.subs);"/>
						<outline text="add (&quot;&lt;/body&gt;&quot;); indentlevel--;"/>
						</outline>
					<outline text="add (&quot;&lt;/opml&gt;&quot;); indentlevel--;"/>
					<outline text="console.log (&quot;opmlify: opmltext == \n&quot; + opmltext);" isComment="true"/>
					<outline text="return (opmltext);"/>
					<outline text="}"/>
					</outline>
				<outline text="function getOutlineHtml (theOutline) {" created="Thu, 10 Jun 2021 16:51:40 GMT">
					<outline text="var htmltext = &quot;&quot;; indentlevel = 0;" created="Thu, 10 Jun 2021 18:52:52 GMT"/>
					<outline text="function add (s) {" created="Thu, 10 Jun 2021 18:53:04 GMT">
						<outline text="htmltext += filledString (&quot;\t&quot;, indentlevel) + s + &quot;\n&quot;;" created="Thu, 10 Jun 2021 18:57:55 GMT"/>
						<outline text="}" created="Thu, 10 Jun 2021 18:57:50 GMT"/>
						</outline>
					<outline text="function addSubsHtml (node) {" created="Thu, 10 Jun 2021 18:52:07 GMT">
						<outline text="add (&quot;&lt;ul&gt;&quot;); indentlevel++;" created="Thu, 10 Jun 2021 18:54:17 GMT"/>
						<outline text="node.subs.forEach (function (sub) {" created="Thu, 10 Jun 2021 18:54:17 GMT">
							<outline text="add (&quot;&lt;li&gt;&quot; + sub.text + &quot;&lt;/li&gt;&quot;);" created="Thu, 10 Jun 2021 18:54:46 GMT"/>
							<outline text="if (sub.subs !== undefined) {" created="Thu, 10 Jun 2021 18:55:12 GMT">
								<outline text="addSubsHtml (sub);" created="Thu, 10 Jun 2021 18:55:37 GMT"/>
								<outline text="}" created="Thu, 10 Jun 2021 18:55:21 GMT"/>
								</outline>
							<outline text="});" created="Thu, 10 Jun 2021 18:54:26 GMT"/>
							</outline>
						<outline text="add (&quot;&lt;/ul&gt;&quot;); indentlevel--;" created="Thu, 10 Jun 2021 18:54:17 GMT"/>
						<outline text="}" created="Thu, 10 Jun 2021 18:52:23 GMT"/>
						</outline>
					<outline text="addSubsHtml (theOutline.opml.body);"/>
					<outline text="return (htmltext);" created="Thu, 10 Jun 2021 16:58:17 GMT"/>
					<outline text="}" created="Thu, 10 Jun 2021 16:51:51 GMT"/>
					</outline>
				<outline text="function visitAll (theOutline, callback) {" created="Sat, 03 Jul 2021 19:33:13 GMT">
					<outline text="function visitSubs (theNode) {" created="Sat, 03 Jul 2021 19:33:25 GMT">
						<outline text="if (theNode.subs !== undefined) {" created="Sat, 03 Jul 2021 19:34:31 GMT">
							<outline text="for (var i = 0; i &lt; theNode.subs.length; i++) {" created="Sat, 03 Jul 2021 19:34:44 GMT">
								<outline text="var theSub = theNode.subs [i];" created="Sat, 03 Jul 2021 19:36:34 GMT"/>
								<outline text="if (!callback (theSub)) {" created="Sat, 03 Jul 2021 19:35:39 GMT">
									<outline text="return (false);" created="Sat, 03 Jul 2021 19:35:50 GMT"/>
									<outline text="}" created="Sat, 03 Jul 2021 19:35:53 GMT"/>
									</outline>
								<outline text="visitSubs (theSub);" created="Sat, 03 Jul 2021 19:35:59 GMT"/>
								<outline text="}" created="Sat, 03 Jul 2021 19:35:15 GMT"/>
								</outline>
							<outline text="}" created="Sat, 03 Jul 2021 19:34:39 GMT"/>
							</outline>
						<outline text="return (true);" created="Sat, 03 Jul 2021 19:35:50 GMT"/>
						<outline text="}" created="Sat, 03 Jul 2021 19:34:19 GMT"/>
						</outline>
					<outline text="visitSubs (theOutline.opml.body);" created="Sat, 03 Jul 2021 19:33:26 GMT"/>
					<outline text="}" created="Sat, 03 Jul 2021 19:33:20 GMT"/>
					</outline>
				</outline>
			<outline text="client/styles.css" created="Fri, 02 Jul 2021 15:25:32 GMT">
				<outline text="body {">
					<outline text="font-family: Ubuntu;"/>
					<outline text="font-size: 18px;"/>
					<outline text="background-color: whitesmoke;"/>
					<outline text="}"/>
					</outline>
				<outline text=".divPageBody {">
					<outline text="width: 60%;"/>
					<outline text="margin-top: 50px;"/>
					<outline text="margin-left: auto;"/>
					<outline text="margin-right: auto;"/>
					<outline text="margin-bottom: 400px;" created="Fri, 11 Jun 2021 12:29:37 GMT"/>
					<outline text="}"/>
					</outline>
				<outline text="p {" created="Thu, 10 Jun 2021 12:24:39 GMT">
					<outline text="line-height: 140%;" created="Thu, 10 Jun 2021 12:24:43 GMT"/>
					<outline text="}" created="Thu, 10 Jun 2021 12:24:52 GMT"/>
					</outline>
				<outline text="" created="Sun, 13 Jun 2021 14:05:23 GMT"/>
				<outline text=".divOutlineViewer {" created="Thu, 10 Jun 2021 20:59:42 GMT">
					<outline text="margin-top: 15px;" created="Thu, 10 Jun 2021 12:59:54 GMT"/>
					<outline text="padding: 3px;" created="Thu, 10 Jun 2021 12:54:13 GMT"/>
					<outline text="border: 1px solid silver;" created="Thu, 10 Jun 2021 12:34:30 GMT"/>
					<outline text="font-size: 16px;" created="Thu, 10 Jun 2021 21:02:08 GMT"/>
					<outline text="}" created="Thu, 10 Jun 2021 20:59:45 GMT"/>
					</outline>
				<outline text=".divOutlineViewer ul {" created="Thu, 10 Jun 2021 20:59:42 GMT">
					<outline text="list-style-type: circle;" created="Thu, 10 Jun 2021 21:04:33 GMT"/>
					<outline text="}" created="Thu, 10 Jun 2021 20:59:45 GMT"/>
					</outline>
				<outline text=".divOutlineViewer li {" created="Thu, 10 Jun 2021 20:59:42 GMT">
					<outline text="padding-top: 3px;" created="Thu, 10 Jun 2021 12:54:13 GMT"/>
					<outline text="padding-bottom: 3px;" created="Thu, 10 Jun 2021 12:54:13 GMT"/>
					<outline text="}" created="Thu, 10 Jun 2021 20:59:45 GMT"/>
					</outline>
				<outline text="" created="Fri, 11 Jun 2021 12:10:22 GMT"/>
				<outline text=".divHeadElementsViewer {" created="Fri, 11 Jun 2021 12:10:22 GMT">
					<outline text="margin-top: 15px;" created="Thu, 10 Jun 2021 12:59:54 GMT"/>
					<outline text="border: 1px solid silver;" created="Thu, 10 Jun 2021 12:34:30 GMT"/>
					<outline text="font-size: 16px;" created="Thu, 10 Jun 2021 21:02:08 GMT"/>
					<outline text="}" created="Fri, 11 Jun 2021 12:10:27 GMT"/>
					</outline>
				<outline text=".divHeadElementsViewer td {" created="Fri, 11 Jun 2021 12:11:54 GMT">
					<outline text="vertical-align: top;" created="Fri, 11 Jun 2021 12:12:06 GMT"/>
					<outline text="padding: 3px;" created="Fri, 11 Jun 2021 12:15:46 GMT"/>
					<outline text="font-size: 16px;" created="Thu, 10 Jun 2021 21:02:08 GMT"/>
					<outline text="}" created="Fri, 11 Jun 2021 12:12:12 GMT"/>
					</outline>
				<outline text=".divHeadElementsViewer .tdright {" created="Fri, 11 Jun 2021 12:11:54 GMT">
					<outline text="text-align: right;" created="Fri, 11 Jun 2021 12:12:06 GMT"/>
					<outline text="}" created="Fri, 11 Jun 2021 12:12:12 GMT"/>
					</outline>
				</outline>
			<outline text="client/code.js" created="Fri, 02 Jul 2021 15:25:27 GMT">
				<outline text="7/3/21; 3:27:01 PM by DW" isComment="true" created="Sat, 03 Jul 2021 19:27:01 GMT">
					<outline text="Read an OPML file over the web, parse it into a JavaScript object." created="Sat, 03 Jul 2021 19:27:51 GMT">
						<outline text="1. Display the JSON text for the object in the first box." created="Sat, 03 Jul 2021 19:28:13 GMT"/>
						<outline text="2. Convert the JavaScript object to OPML text, and display that in the second box." created="Sat, 03 Jul 2021 19:28:22 GMT"/>
						<outline text="3. Generate an HTML rendering of the JavaScript object and display in third box." created="Sat, 03 Jul 2021 19:29:05 GMT"/>
						</outline>
					<outline text="Also display, in the JavaScript console:" created="Sat, 03 Jul 2021 15:29:57 GMT">
						<outline text="The outline's title from the head section and " created="Sat, 03 Jul 2021 15:34:45 GMT"/>
						<outline text="The text of the third child of the second top level subhead of the United States." created="Sat, 03 Jul 2021 15:34:54 GMT"/>
						<outline text="Illustrates how you get data from the compiled structure." created="Sat, 03 Jul 2021 15:31:45 GMT"/>
						<outline text="Once you've compiled the OPML, you process it as a JavaScript object." created="Sat, 03 Jul 2021 15:35:25 GMT"/>
						<outline text="When you're done, you can serialize it with opml.stringify. " created="Sat, 03 Jul 2021 15:35:47 GMT"/>
						<outline text="By design, works like JSON, so every JS programmer should find this familiar. " created="Sat, 03 Jul 2021 15:36:02 GMT"/>
						</outline>
					<outline text="Visit every node in the outline, and convert the text to upper case." created="Sat, 03 Jul 2021 19:31:33 GMT"/>
					</outline>
				<outline text="const urlOpmlFile = &quot;http://drummer.scripting.com/davewiner/states.opml&quot;;" created="Fri, 02 Jul 2021 20:51:47 GMT"/>
				<outline text="" created="Fri, 02 Jul 2021 20:51:45 GMT"/>
				<outline text="function filledString (ch, ct) { //6/4/14 by DW">
					<outline text="var s = &quot;&quot;;"/>
					<outline text="for (var i = 0; i &lt; ct; i++) {">
						<outline text="s += ch;"/>
						<outline text="}"/>
						</outline>
					<outline text="return (s);"/>
					<outline text="}"/>
					</outline>
				<outline text="function encodeXml (s) { //7/15/14 by DW">
					<outline text="Changes" isComment="true">
						<outline text="12/14/15; 4:28:14 PM by DW">
							<outline text="Check for undefined, return empty string."/>
							</outline>
						</outline>
					<outline text="if (s === undefined) {">
						<outline text="return (&quot;&quot;);"/>
						<outline text="}"/>
						</outline>
					<outline text="else {">
						<outline text="var charMap = {" collapse="true">
							<outline text="'&lt;': '&amp;lt;',"/>
							<outline text="'&gt;': '&amp;gt;',"/>
							<outline text="'&amp;': '&amp;amp;',"/>
							<outline text="'&quot;': '&amp;'+'quot;'"/>
							<outline text="};"/>
							</outline>
						<outline text="s = s.toString();" created="Sat, 13 Apr 2013 20:25:04 GMT" pgfnum="1662"/>
						<outline text="s = s.replace(/\u00A0/g, &quot; &quot;);" created="Fri, 12 Apr 2013 21:27:40 GMT" pgfnum="1632"/>
						<outline text="var escaped = s.replace(/[&lt;&gt;&amp;&quot;]/g, function(ch) {" collapse="true">
							<outline text="return charMap [ch];"/>
							<outline text="});"/>
							</outline>
						<outline text="return escaped;" created="Thu, 07 Feb 2013 04:53:23 GMT" pgfnum="129"/>
						<outline text="}"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function readHttpFile (url, callback, timeoutInMilliseconds, headers) { //5/27/14 by DW">
					<outline text="Changes" isComment="true">
						<outline text="7/17/15; 10:43:16 AM by DW">
							<outline text="New optional param, headers."/>
							</outline>
						<outline text="12/14/14; 5:38:18 PM by DW">
							<outline text="Add optional timeoutInMilliseconds param."/>
							</outline>
						<outline text="5/29/14; 11:13:28 AM by DW">
							<outline text="On error, call the callback with an undefined parameter."/>
							</outline>
						<outline text="5/27/14; 8:31:21 AM by DW">
							<outline text="Simple asynchronous file read over http."/>
							</outline>
						</outline>
					<outline text="if (timeoutInMilliseconds === undefined) {">
						<outline text="timeoutInMilliseconds = 30000;"/>
						<outline text="}"/>
						</outline>
					<outline text="var jxhr = $.ajax ({ ">
						<outline text="url: url,"/>
						<outline text="dataType: &quot;text&quot;, "/>
						<outline text="headers: headers," created="Tue, 14 May 2013 14:35:06 GMT" pgfnum="23850"/>
						<outline text="timeout: timeoutInMilliseconds "/>
						<outline text="}) "/>
						</outline>
					<outline text=".success (function (data, status) { ">
						<outline text="callback (data);"/>
						<outline text="}) "/>
						</outline>
					<outline text=".error (function (status) { ">
						<outline text="for info about timeous see this page." isComment="true">
							<outline text="http://stackoverflow.com/questions/3543683/determine-if-ajax-error-is-a-timeout"/>
							</outline>
						<outline text="console.log (&quot;readHttpFile: url == &quot; + url + &quot;, error == &quot; + jsonStringify (status));" created="Sun, 13 Jan 2013 14:34:21 GMT" pgfnum="17098"/>
						<outline text="callback (undefined);"/>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function startup () {" created="Fri, 02 Jul 2021 15:25:31 GMT">
					<outline text="console.log (&quot;startup&quot;);" created="Fri, 02 Jul 2021 20:50:44 GMT"/>
					<outline text="readHttpFile (urlOpmlFile, function (opmltext) {">
						<outline text="if (opmltext !== undefined) {" created="Fri, 02 Jul 2021 20:57:28 GMT">
							<outline text="var theOutline = opml.parse (opmltext);" created="Fri, 02 Jul 2021 20:57:53 GMT"/>
							<outline text="" created="Sat, 03 Jul 2021 19:22:33 GMT"/>
							<outline text="var jsontext = JSON.stringify (theOutline, undefined, 4);" created="Fri, 02 Jul 2021 21:11:59 GMT"/>
							<outline text="$(&quot;#idJsonViewer&quot;).text (jsontext);" created="Fri, 02 Jul 2021 21:01:28 GMT"/>
							<outline text="" created="Sat, 03 Jul 2021 19:24:40 GMT"/>
							<outline text="var xmltext = opml.stringify (theOutline);" created="Fri, 02 Jul 2021 21:11:59 GMT"/>
							<outline text="$(&quot;#idOpmlViewer&quot;).text (xmltext);" created="Fri, 02 Jul 2021 21:01:28 GMT"/>
							<outline text="" created="Fri, 02 Jul 2021 21:12:52 GMT"/>
							<outline text="var htmltext = opml.htmlify (theOutline);" created="Fri, 02 Jul 2021 21:02:23 GMT"/>
							<outline text="$(&quot;#idOutlineViewer&quot;).html (htmltext);" created="Fri, 02 Jul 2021 21:01:28 GMT"/>
							<outline text="" created="Sat, 03 Jul 2021 19:30:17 GMT"/>
							<outline text="console.log (&quot;\nThe outline's title is \&quot;&quot; + theOutline.opml.head.title + &quot;.\&quot;&quot;); //see comment at top" created="Sat, 03 Jul 2021 15:30:30 GMT"/>
							<outline text="console.log (&quot;The third state in the Great Plains is: \&quot;&quot; + theOutline.opml.body.subs [0].subs [1].subs [2].text + &quot;.\&quot;&quot;);" created="Sat, 03 Jul 2021 15:30:30 GMT"/>
							<outline text="" created="Sat, 03 Jul 2021 19:31:57 GMT"/>
							<outline text="opml.visitAll (theOutline, function (node) {" created="Sat, 03 Jul 2021 19:31:57 GMT">
								<outline text="node.text = node.text.toUpperCase ();" created="Sat, 03 Jul 2021 19:32:24 GMT"/>
								<outline text="return (true); //keep visiting" created="Sat, 03 Jul 2021 19:32:47 GMT"/>
								<outline text="});" created="Sat, 03 Jul 2021 19:32:16 GMT"/>
								</outline>
							<outline text="console.log (opml.stringify (theOutline)); //view the uppercased outline in the JS console" created="Sat, 03 Jul 2021 19:38:29 GMT"/>
							<outline text="}" created="Fri, 02 Jul 2021 20:57:39 GMT"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}" created="Fri, 02 Jul 2021 20:50:43 GMT"/>
					</outline>
				</outline>
			<outline text="client/index.html" created="Fri, 02 Jul 2021 15:26:18 GMT">
				<outline text="&lt;html&gt;">
					<outline text="&lt;head&gt;">
						<outline text="&lt;title&gt;OPML client demo&lt;/title&gt;"/>
						<outline text="&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;"/>
						<outline text="&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;"/>
						<outline text="&lt;script src=&quot;http://scripting.com/code/includes/jquery-1.9.1.min.js&quot;&gt;&lt;/script&gt;"/>
						<outline text="&lt;link href=&quot;http://scripting.com/code/includes/bootstrap.css&quot; rel=&quot;stylesheet&quot;&gt;"/>
						<outline text="&lt;script src=&quot;opml.js&quot;&gt;&lt;/script&gt;"/>
						<outline text="&lt;script src=&quot;code.js&quot;&gt;&lt;/script&gt;"/>
						<outline text="&lt;link rel=&quot;stylesheet&quot; href=&quot;styles.css&quot; type=&quot;text/css&quot;&gt;"/>
						<outline text="&lt;/head&gt;"/>
						</outline>
					<outline text="&lt;body&gt;">
						<outline text="&lt;div class=&quot;divPageBody&quot;&gt;">
							<outline text="&lt;pre class=&quot;divJsonViewer&quot; id=&quot;idJsonViewer&quot;&gt;" created="Fri, 02 Jul 2021 21:02:41 GMT">
								<outline text="&lt;/pre&gt;" created="Fri, 02 Jul 2021 21:02:45 GMT"/>
								</outline>
							<outline text="&lt;div class=&quot;divOutlineViewer&quot; id=&quot;idOutlineViewer&quot;&gt;" created="Fri, 02 Jul 2021 21:02:41 GMT">
								<outline text="&lt;/div&gt;" created="Fri, 02 Jul 2021 21:02:45 GMT"/>
								</outline>
							<outline text="&lt;pre id=&quot;idOpmlViewer&quot;&gt;" created="Fri, 02 Jul 2021 21:09:53 GMT">
								<outline text="&lt;/pre&gt;" created="Fri, 02 Jul 2021 21:09:59 GMT"/>
								</outline>
							<outline text="&lt;/div&gt;"/>
							</outline>
						<outline text="&lt;script&gt;">
							<outline text="$(document).ready (function () {">
								<outline text="startup ();" created="Wed, 30 Oct 2013 15:20:06 GMT" pgfnum="30656"/>
								<outline text="});"/>
								</outline>
							<outline text="&lt;/script&gt;"/>
							</outline>
						<outline text="&lt;/body&gt;"/>
						</outline>
					<outline text="&lt;/html&gt;"/>
					</outline>
				</outline>
			<outline text="client/readme.md" isComment="true" created="Fri, 02 Jul 2021 15:26:23 GMT">
				<outline text="# Browser-based OPML" created="Fri, 02 Jul 2021 15:26:28 GMT">
					<outline text="JavaScript code for parsing and stringifying OPML structures, subscribing to outlines via websockets, displaying an outline in the browse."/>
					</outline>
				<outline text=""/>
				<outline text="The core code for the browser version is opml.js."/>
				<outline text="It uses routines in several of my libraries:">
					<outline text="* utils.js"/>
					<outline text="* xml.js"/>
					</outline>
				<outline text="It also uses jQuery."/>
				<outline text="The demo app, in index.html and its two included files, code.js and styles.css, does something which I will explain here."/>
				<outline text="You can run the test app from scripting.com."/>
				</outline>
			<outline text="" created="Fri, 02 Jul 2021 21:15:09 GMT"/>
			<outline text="readme.md" created="Fri, 02 Jul 2021 14:57:47 GMT">
				<outline text="# opmlPackage" created="Fri, 02 Jul 2021 14:57:50 GMT">
					<outline text="Node and browser code that reads and writes OPML." created="Fri, 02 Jul 2021 15:04:01 GMT"/>
					</outline>
				<outline text="### The Node package" created="Sat, 03 Jul 2021 20:14:58 GMT">
					<outline text="It's on NPM, it's called OPML." created="Sat, 03 Jul 2021 20:15:04 GMT"/>
					<outline text="Here's a snippet that reads an OPML file, converts it to a JavaScript object, displays it to the console via JSON.stringify." created="Sat, 03 Jul 2021 20:15:15 GMT">
						<outline text="&lt;%includeExample (&quot;example1&quot;)%&gt;"/>
						</outline>
					<outline text="The full Node example is &lt;a href=&quot;https://github.com/scripting/opmlPackage/tree/main/examples/parsing&quot;&gt;here&lt;/a&gt;. " created="Sat, 03 Jul 2021 20:32:48 GMT"/>
					</outline>
				<outline text="### OPML in the browser" created="Sat, 03 Jul 2021 20:33:29 GMT">
					<outline text="The same routines are available for JavaScript code running in the browser. " created="Sat, 03 Jul 2021 20:33:39 GMT"/>
					<outline text="See the &lt;a href=&quot;https://github.com/scripting/opmlPackage/tree/main/client&quot;&gt;example&lt;/a&gt;. You have to include &lt;a href=&quot;https://github.com/scripting/opmlPackage/blob/main/client/opml.js&quot;&gt;opml.js&lt;/a&gt; in your app, as the example does. " created="Sat, 03 Jul 2021 20:34:11 GMT"/>
					</outline>
				</outline>
			</outline>
		<outline text="build script" created="Fri, 02 Jul 2021 14:50:21 GMT">
			<outline text="nodeEditorSuite.utilities.buildOpmlPackage ();" created="Fri, 02 Jul 2021 14:50:25 GMT"/>
			</outline>
		</body>
	</opml>
